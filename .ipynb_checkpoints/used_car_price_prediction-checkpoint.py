# -*- coding: utf-8 -*-
"""Used car price prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1avpiCpSFjsOdXAmrgJdhvl_i2X6OJxgK

# Part 1: Data Preprocessing

Dataset Link: https://www.kaggle.com/datasets/nehalbirla/vehicle-dataset-from-cardekho?resource=download

# Importing the libraries and datasets
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

dataset = pd.read_csv('/content/sample_data/Car details v3.csv')

from google.colab import drive
drive.mount('/content/drive')

dataset.head()

"""# Data exploration"""

dataset.shape

dataset.columns

dataset.info()

dataset.select_dtypes(include = 'object').columns

len(dataset.select_dtypes(include = 'object').columns)

#numeric columns
dataset.select_dtypes(include = ['float64', 'int64']).columns

len(dataset.select_dtypes(include = ['float64', 'int64']).columns)

dataset.describe()

"""# Dealing with missing values

"""

dataset.isnull().values.any()

dataset.isnull().values.sum()

dataset = dataset.dropna()

dataset.isnull().values.any()

dataset.isnull().values.sum()

dataset.shape

"""# Restructuring dataset

"""

dataset.head()

dataset = dataset.drop(columns='name')

dataset.head()

#add a column
dataset['Current Year'] = 2024

dataset.head()

dataset['Years Old'] = dataset['Current Year'] - dataset['year']



dataset.head()

dataset = dataset.drop(columns=['Current Year'])

dataset.head()

"""# Encoding categorical data

"""

dataset.head()

# Remove ' kmpl' or ' km/kg' suffix and convert to float
dataset['mileage'] = dataset['mileage'].str.replace(' kmpl', '').str.replace(' km/kg', '').astype(float)

dataset['engine'] = dataset['engine'].str.replace(' CC', '').astype(float)

# Remove ' bhp' suffix and convert to float
dataset['max_power'] = dataset['max_power'].str.replace(' bhp', '').astype(float)

dataset.drop(columns = ['torque'])

dataset.select_dtypes(include='object').columns

dataset.head()

dataset.head()

dataset = dataset.drop(columns=['torque'])

dataset.head()

dataset.select_dtypes(include='object').columns

dataset = dataset.drop(columns=['seller_type'])

dataset.head()

dataset.select_dtypes(include='object').columns

dataset['fuel'].nunique()

dataset['transmission'].nunique()

unique_owners = dataset['owner'].value_counts()

dataset['owner'].unique()

(dataset['owner'] == 'Test Drive Car').sum()

dataset = dataset[dataset['owner'] != 'Test Drive Car']

dataset['owner'].unique()

label_mapping = {'First Owner': 1, 'Second Owner': 2, 'Third Owner': 3, 'Fourth & Above Owner': 4}

# Create a new column 'owner_label' with the mapped labels
dataset['owner_label'] = dataset['owner'].map(label_mapping)

dataset.head()

dataset=dataset.drop(columns=['owner'])

dataset.head()

print(dataset)

dataset.select_dtypes(include='object').columns

dataset['fuel'].nunique()

dataset['transmission'].nunique()

dataset.shape

#one hot encodign
dataset = pd.get_dummies(data=dataset, drop_first = True)

dataset.head()

dataset.shape



"""# Correlation Matrix

"""

dataset_2 = dataset.drop(columns='selling_price')

dataset_2.corrwith(dataset['selling_price']).plot.bar(
    figsize = (16,9), title = ("Correlated with Selling Price"), grid= True
)

corr = dataset.corr()

# heatmap
plt.figure(figsize=(16,9))
sns.heatmap(corr, annot = True)



"""# Splitting the dataset

"""

dataset.head()

# matrix of feature
x = dataset.drop(columns='selling_price')

#target variable
y = dataset['selling_price']

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

x_train.shape

y_train.shape

x_test.shape

y_test.shape



"""# Part 2: Building the model

# 1. Linear Regression
"""

from sklearn.linear_model import LinearRegression
regressor_mlr = LinearRegression()
regressor_mlr.fit(x_train, y_train)

y_pred = regressor_mlr.predict(x_test)

from sklearn.metrics import r2_score

r2_score(y_test, y_pred)

"""# 2. Random Forest"""

from sklearn.ensemble import RandomForestRegressor
regressor_rf = RandomForestRegressor()
regressor_rf.fit(x_train, y_train)

regressor_rf.get_params()

y_pred = regressor_rf.predict(x_test)

from sklearn.metrics import r2_score
r2_score(y_test, y_pred)

"""# Part 3: Finding the optimal parameters using RandomizedSearchCV"""

from sklearn.model_selection import RandomizedSearchCV

parameters = {
    'n_estimators': [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000],
    'criterion': ['friedman_mse', 'squared_error', 'absolute_error', 'poisson'],  # Corrected parameter values
    'max_depth': [10, 20, 30, 40, 50],
    'min_samples_split': [2, 5, 10, 20, 50],
    'min_samples_leaf': [1, 2, 5, 10],
    'max_features': ['auto', 'sqrt', 'log2']
}

parameters

random_cv = RandomizedSearchCV(estimator=regressor_rf, param_distributions=parameters, n_iter=10,
                               scoring='neg_mean_absolute_error', cv=5, verbose=2, n_jobs=-1)

random_cv.fit(x_train, y_train)

random_cv.best_estimator_

random_cv.best_params_



"""# Final Model (Random Forest)"""

from sklearn.ensemble import RandomForestRegressor

regressor = RandomForestRegressor(
    bootstrap=True,
    ccp_alpha=0.0,
    criterion='squared_error',
    max_depth=None,
    max_features=1.0,
    max_leaf_nodes=None,
    max_samples=None,
    min_impurity_decrease=0.0,
    min_samples_leaf=1,
    min_samples_split=2,
    min_weight_fraction_leaf=0.0,
    n_estimators=100,
    n_jobs=None,
    oob_score=False,
    random_state=None,
    verbose=0,
    warm_start=False
)

regressor.fit(x_train, y_train)

y_pred = regressor.predict(x_test)

from sklearn.metrics import r2_score
r2_score(y_test, y_pred)

x_test.head()

new_data = pd.DataFrame({
    'year': [2023],
    'km_driven': [20000],
    'mileage': [16.5],
    'engine': [1600.0],
    'max_power': [81.86],
    'seats': [7],
    'Years Old': [1],
    'owner_label': [2],
    'fuel_Diesel': [0],
    'fuel_LPG': [0],
    'fuel_Petrol': [1],
    'transmission_Manual': [1]
})

# Make predictions
predictions = regressor.predict(new_data)
print(predictions)

